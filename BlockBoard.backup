import React from 'react'
import Block from './Block.js'

var createNewLine = (status = 0, color = "black") => {
  var l = [];
  for(var i = 0; i <= 19; i++) {
    l[i] = {
      status,
      color
    };
  }
  return l
}

// move piece down
var movePieceDown = function(s) {
  var cy = s.piece.coord.y,
    cx = s.piece.coord.x,
    p = s.piece,
    b = s.board;

  if(s.piece.coord.y < s.board.length - 1) {
    s.piece.coord.y++
  } else {
    s.piece = false
  }

  for(var y = cy; (y >= 0 && y > cy - p.content.length); y--) {
    for(var x = cx; (x < b[0].length && x < p.content[0].length ); x++) {
      b[y][x] = p.content[(y - cy) * -1 ][x]
      if(y - p.content.length >= 0 ) b[y - p.content.length][x] = {
        status: 0,
        color: "black"
      }
    }
  }

  return s
}

// move piece right
var movePieceRight = function(s) {
  var cy = s.piece.coord.y,
    cx = s.piece.coord.x,
    p = s.piece,
    b = s.board;

  if(s.piece.coord.x < s.board[0].length - 1) {
    s.piece.coord.x++
  }

  for(var y = cy; (y >= 0 && y > cy - p.content.length); y--) {
    for(var x = cx; (x < (cx + p.content[0].length) ); x++) {
      b[y][x] = p.content[(y - cy) * -1 ][(x - cx)]
      if(y - p.content.length >= 0 ) b[y - p.content.length][x] = {
        status: 0,
        color: "black"
      }
    }
  }

  return s
}

var BlockBoard = React.createClass({
  getInitialState: function() {

    var a = []
    for(var i = 0; i <= 39; i++) {
      a[i] = createNewLine()
    }

    return {
      board: a
    }

  },
  componentDidMount: function() {
    var me = this;
    document.addEventListener("keydown", function(e) {
      // up
      if(e.keyCode == 38) me.handleMoveRight()
      // left
      if(e.keyCode == 37) me.handleMoveRight()
      // down
      if(e.keyCode == 40) me.handleMoveDown()
      //right
      if(e.keyCode == 39) me.handleMoveRight()

    })
    this.loop()
  },
  handleMoveRight: function() {
    var s = this.state
    if(s.piece) s = movePieceRight(s)
    this.setState(s)
  },
  handleMoveDown: function() {
    var s = this.state
    if(s.piece) s = movePieceDown(s)
    this.setState(s)
  },
  loop: function() {

    var s = this.state;

    if(!s.interval) s.interval = setInterval(this.loop, 1000);

    var getRandomIntInclusive = function(min, max) {
      return Math.floor(Math.random() * (max - min + 1)) + min
    }

    var cleanCompletedLines = function(b) {
      var dirty = false;
      for(var i = b.length - 1; i >= 0; i--) {
        if(b[i][0].color == "blue") dirty = true;
        if(dirty) {
          b[i] = i == 0 ? createNewLine() : b[i - 1];
        }
      }
      return b
    }

    s.board = cleanCompletedLines(s.board);

    if(!s.piece) {
      s.piece = {}
      s.piece.content = this.getNewPiece()
      s.piece.coord = {
        x: 0,
        y: -1
      }
    }

    if(s.piece) s = movePieceDown(s)

    // check if line is full
    s.board.forEach(function(v, i) {
      var full = true;
      v.map(function(v2, i2) {
        if(v2.status == 0) full = false;
      });

      if(full) s.board[i] = createNewLine(1, "blue")

    });


    this.setState(s);

  },
  getNewPiece: function() {
    var a = [];
    a[0] = [];
    a[0][0] = {
      status: 1,
      color: "red"
    };
    a[0][1] = {
      status: 1,
      color: "red"
    };
    a[1] = [];
    a[1][0] = {
      status: 1,
      color: "red"
    };
    a[1][1] = {
      status: 1,
      color: "red"
    };
    return a
  },
  render: function() {
    return (
      <div id="tetris-blockboard">
        {this.state.board.map((v, i) => {
          return (
            <div className="line">
              {v.map((v2, i2) => {
                return <Block key={ 'b' + i + i2} status={v2.status} color={v2.color} />
              })}
            </div>
          )
        })}
      </div>
    )
  }
})

export default BlockBoard
